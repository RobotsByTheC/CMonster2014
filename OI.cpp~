// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.


#include "OI.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "SmartDashboard/SmartDashboard.h"
#include "Commands/CatcherExtendCommand.h"
#include "Commands/CatcherRetractCommand.h"
#include "Commands/CompressorStartCommand.h"
#include "Commands/CrabLeftCommand.h"
#include "Commands/CrabRightCommand.h"
#include "Commands/DriveCommand.h"
#include "Commands/FieldCentricMecanumDriveCommand.h"
#include "Commands/FrontAutonomousCommandGroup.h"
#include "Commands/FrontAutonomousDriveCommand.h"
#include "Commands/FunCommand.h"
#include "Commands/ResetGyroComand.h"
#include "Commands/SideAutonomousCommandGroup.h"
#include "Commands/SideAutonomousDriveCommand.h"
#include "Commands/SweeperEjectCommand.h"
#include "Commands/SweeperExtendCommand.h"
#include "Commands/SweeperOffCommand.h"
#include "Commands/SweeperRetractCommand.h"
#include "Commands/SweeperSweepCommand.h"
#include "Commands/WaitForVisionCommand.h"

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

OI::OI() {
	// Process operator interface input here.
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

	secondaryController = new Joystick(2);
	
	retractCatcherButton = new JoystickButton(secondaryController, 6);
	retractCatcherButton->WhenPressed(new CatcherRetractCommand());
	extendCatcherButton = new JoystickButton(secondaryController, 8);
	extendCatcherButton->WhenPressed(new CatcherExtendCommand());
	retractSweeperButton = new JoystickButton(secondaryController, 5);
	retractSweeperButton->WhenPressed(new SweeperRetractCommand());
	extendSweeperButton = new JoystickButton(secondaryController, 7);
	extendSweeperButton->WhenPressed(new SweeperExtendCommand());
	sweeperEjectButton = new JoystickButton(secondaryController, 3);
	sweeperEjectButton->WhenPressed(new SweeperEjectCommand());
	sweeperOffButton = new JoystickButton(secondaryController, 4);
	sweeperOffButton->WhenPressed(new SweeperOffCommand());
	sweeperSweepButton = new JoystickButton(secondaryController, 1);
	sweeperSweepButton->WhenPressed(new SweeperSweepCommand());
	driveJoystick = new Joystick(1);
	
	enableNormalDriveButton = new JoystickButton(driveJoystick, 7);
	enableNormalDriveButton->WhenPressed(new DriveCommand());
	resetGyroButton = new JoystickButton(driveJoystick, 12);
	resetGyroButton->WhenPressed(new ResetGyroComand());
	fieldCentricMecanumDriveButton = new JoystickButton(driveJoystick, 8);
	fieldCentricMecanumDriveButton->WhenPressed(new FieldCentricMecanumDriveCommand());
     

        // SmartDashboard Buttons
	SmartDashboard::PutData("Sweeper Extend Command", new SweeperExtendCommand());

	SmartDashboard::PutData("Sweeper Retract Command", new SweeperRetractCommand());

	SmartDashboard::PutData("Sweeper Sweep Command", new SweeperSweepCommand());

	SmartDashboard::PutData("Sweeper Eject Command", new SweeperEjectCommand());

	SmartDashboard::PutData("Sweeper Off Command", new SweeperOffCommand());

	SmartDashboard::PutData("Catcher Extend Command", new CatcherExtendCommand());

	SmartDashboard::PutData("Catcher Retract Command", new CatcherRetractCommand());

	SmartDashboard::PutData("Reset Gyro Comand", new ResetGyroComand());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

Joystick* OI::getSecondaryController() {
	return secondaryController;
}

Joystick* OI::getDriveJoystick() {
	return driveJoystick;
}

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
