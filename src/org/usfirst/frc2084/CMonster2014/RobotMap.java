/* 
 * Copyright (c) 2014 RobotsByTheC. All rights reserved.
 *
 * Open Source Software - may be modified and shared by FRC teams. The code must
 * be accompanied by the BSD license file in the root directory of the project.
 */
package org.usfirst.frc2084.CMonster2014;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.PIDSource.PIDSourceParameter;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveSubsystemFrontLeftTalon;
    public static SpeedController driveSubsystemFrontLeftTalon2;
    public static SpeedController driveSubsystemFrontRightTalon;
    public static SpeedController driveSubsystemFrontRightTalon2;
    public static SpeedController driveSubsystemRearLeftTalon;
    public static SpeedController driveSubsystemRearLeftTalon2;
    public static SpeedController driveSubsystemRearRightTalon;
    public static SpeedController driveSubsystemRearRightTalon2;
    public static Encoder driveSubsystemRearRightEncoder;
    public static Compressor compressorSubsystemCompressor;
    public static Solenoid sweeperSubsystemSolenoid;
    public static SpeedController sweeperSubsystemJaguar;
    public static Solenoid catcherSubsytemSolenoid;
    public static DigitalOutput ledSubsystemPin0;
    public static DigitalOutput ledSubsystemPin1;
    public static DigitalOutput ledSubsystemPin2;
    public static DigitalOutput ledSubsystemPin3;
    public static DigitalOutput ledSubsystemPin4;
    public static DigitalOutput ledSubsystemPin5;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static BetterGyro driveSubsystemSteeringGyro;
    public static TempSensor driveSubsystemSteeringGyroTemp;
    public static ADXL345_I2C driveSubsystemAccelerometer;

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveSubsystemFrontLeftTalon = new Talon(1, 1);
        LiveWindow.addActuator("Drive Subsystem", "Front Left Talon", (Talon) driveSubsystemFrontLeftTalon);

        driveSubsystemFrontLeftTalon2 = new Talon(1, 2);
        LiveWindow.addActuator("Drive Subsystem", "Front Left Talon 2", (Talon) driveSubsystemFrontLeftTalon2);

        driveSubsystemFrontRightTalon = new Talon(1, 3);
        LiveWindow.addActuator("Drive Subsystem", "Front Right Talon", (Talon) driveSubsystemFrontRightTalon);

        driveSubsystemFrontRightTalon2 = new Talon(1, 4);
        LiveWindow.addActuator("Drive Subsystem", "Front Right Talon 2", (Talon) driveSubsystemFrontRightTalon2);

        driveSubsystemRearLeftTalon = new Talon(1, 5);
        LiveWindow.addActuator("Drive Subsystem", "Rear Left Talon", (Talon) driveSubsystemRearLeftTalon);

        driveSubsystemRearLeftTalon2 = new Talon(1, 6);
        LiveWindow.addActuator("Drive Subsystem", "Rear Left Talon 2", (Talon) driveSubsystemRearLeftTalon2);

        driveSubsystemRearRightTalon = new Talon(1, 7);
        LiveWindow.addActuator("Drive Subsystem", "Rear Right Talon", (Talon) driveSubsystemRearRightTalon);

        driveSubsystemRearRightTalon2 = new Talon(1, 8);
        LiveWindow.addActuator("Drive Subsystem", "Rear Right Talon 2", (Talon) driveSubsystemRearRightTalon2);

        driveSubsystemRearRightEncoder = new Encoder(1, 2, 1, 3, false, EncodingType.k2X);
        LiveWindow.addSensor("Drive Subsystem", "Rear Right Encoder", driveSubsystemRearRightEncoder);
        driveSubsystemRearRightEncoder.setDistancePerPulse(0.002908882);
        driveSubsystemRearRightEncoder.setPIDSourceParameter(PIDSourceParameter.kDistance);
        driveSubsystemRearRightEncoder.start();
        compressorSubsystemCompressor = new Compressor(1, 1, 1, 1);

        sweeperSubsystemSolenoid = new Solenoid(1, 2);
        LiveWindow.addActuator("Sweeper Subsystem", "Solenoid", sweeperSubsystemSolenoid);

        sweeperSubsystemJaguar = new Jaguar(1, 9);
        LiveWindow.addActuator("Sweeper Subsystem", "Jaguar", (Jaguar) sweeperSubsystemJaguar);

        catcherSubsytemSolenoid = new Solenoid(1, 1);
        LiveWindow.addActuator("Catcher Subsytem", "Solenoid", catcherSubsytemSolenoid);

        ledSubsystemPin0 = new DigitalOutput(1, 4);

        ledSubsystemPin1 = new DigitalOutput(1, 5);

        ledSubsystemPin2 = new DigitalOutput(1, 6);

        ledSubsystemPin3 = new DigitalOutput(1, 7);

        ledSubsystemPin4 = new DigitalOutput(1, 8);

        ledSubsystemPin5 = new DigitalOutput(1, 9);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveSubsystemSteeringGyro = new BetterGyro(1, 1);
        driveSubsystemSteeringGyroTemp = new TempSensor(2);
        driveSubsystemAccelerometer = new ADXL345_I2C(1, ADXL345_I2C.DataFormat_Range.k4G);
    }
}
