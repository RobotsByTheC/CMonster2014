// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc2084.CMonster2014.commands;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc2084.CMonster2014.Robot;
import org.usfirst.frc2084.CMonster2014.RobotMap;

/**
 *
 */
public class FieldCentricMecanumDriveCommand extends Command {

    public double ROTATION_DEADBAND = 0.2;
    public static final double MAX_ROTATION = 0.5;

    public FieldCentricMecanumDriveCommand() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveSubsystem);
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        Joystick driveJoystick = Robot.oi.getDriveJoystick();
        double z = -driveJoystick.getZ();
        double scaledZ = z;
        if (Math.abs(z) < ROTATION_DEADBAND) {
            scaledZ = 0;
        } else {
            scaledZ += z < 0 ? ROTATION_DEADBAND : -ROTATION_DEADBAND;
            scaledZ = (scaledZ / (1.0 - ROTATION_DEADBAND)) * MAX_ROTATION;
        }
        SmartDashboard.putNumber("Rotation Speed", scaledZ);
        Robot.driveSubsystem.getRobotDrive().mecanumDrive_Cartesian(
                -driveJoystick.getX(),
                -driveJoystick.getY(),
                scaledZ,
                RobotMap.driveSubsystemSteeringGyro.getAngle()
        );
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
        Robot.driveSubsystem.getRobotDrive().stopMotor();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
