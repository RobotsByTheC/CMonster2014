/* 
 * Copyright (c) 2014 RobotsByTheC. All rights reserved.
 *
 * Open Source Software - may be modified and shared by FRC teams. The code must
 * be accompanied by the BSD license file in the root directory of the project.
 */
package org.usfirst.frc2084.CMonster2014.subsystems;

import org.usfirst.frc2084.CMonster2014.RobotMap;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Subsystem;

/**
 * The subsystem that communicates with the Arduino to control the LED strip. It
 * uses six DIO pins to form a six bit number. Each number codes for a different
 * led pattern.
 */
public class LedSubsystem extends Subsystem {

    // LED strip pattern defintions (pretty self explanatory)
    public static final int DISABLE_CODE = 0x3F;
    public static final int SOLID_RED_CODE = 0x0;
    public static final int SOLID_BLUE_CODE = 0x1;
    public static final int SOLID_GREEN_CODE = 0x2;
    public static final int BLINK_RED_CODE = 0x3;
    public static final int BLINK_BLUE_CODE = 0x4;
    public static final int BLINK_GREEN_CODE = 0x5;
    public static final int PULSE_RED_CODE = 0x6;
    public static final int PULSE_BLUE_CODE = 0x7;
    public static final int PULSE_GREEN_CODE = 0x8;
    public static final int CONVERGE_RED_CODE = 0x9;
    public static final int CONVERGE_BLUE_CODE = 0xA;
    public static final int CONVERGE_GREEN_CODE = 0xB;
    public static final int DIVERGE_RED_CODE = 0xC;
    public static final int DIVERGE_BLUE_CODE = 0xD;
    public static final int DIVERGE_GREEN_CODE = 0xE;
    public static final int RANDOM_PATTERN_CODE = 0xF;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    DigitalOutput pin0 = RobotMap.ledSubsystemPin0;
    DigitalOutput pin1 = RobotMap.ledSubsystemPin1;
    DigitalOutput pin2 = RobotMap.ledSubsystemPin2;
    DigitalOutput pin3 = RobotMap.ledSubsystemPin3;
    DigitalOutput pin4 = RobotMap.ledSubsystemPin4;
    DigitalOutput pin5 = RobotMap.ledSubsystemPin5;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    }

    /**
     * Sends the specified code to the DIO pins and to the Arduino.
     *
     * @param code the code to send
     */
    public void sendCode(int code) {
        // The mask initially starts at one to get the value of the first bit 
        // the first time the loop runs.
        byte mask = 0x1;
        // Loops through the first six bits in the code and sets the apporiate 
        // DIO to its value.
        for (int i = 0; i < 6; i++) {
            DigitalOutput out;
            switch (i) {
                case 0:
                    out = pin0;
                    break;
                case 1:
                    out = pin1;
                    break;
                case 2:
                    out = pin2;
                    break;
                case 3:
                    out = pin3;
                    break;
                case 4:
                    out = pin4;
                    break;
                case 5:
                default:
                    out = pin5;
            }
            // This concise one-liner isolates the bit specified by the bitmask 
            // and checks if it is equal to one. This boolean value turns the
            // DIO pin on or off.
            out.set((code & mask) == mask);
            // Shift the mask left one bit so it will get the next bit the next
            // time the loop runs.
            mask <<= 1;
        }
    }
}
